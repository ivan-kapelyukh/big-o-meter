{"version":3,"sources":["analysisWorker.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","props","renderResults","state","resultsShown","className","chartType","data","graphData","width","height","id","options","hAxis","title","minVale","baselineColor","gridlineColor","titleTextStyle","fontSize","vAxis","minValue","legend","colors","backgroundColor","model","class","charAt","toUpperCase","slice","r2","toPrecision","analyseCode","code","value","analysisWorker","postMessage","setState","analysisProgress","analysing","Worker","onmessage","e","JSON","parse","results","inputRuntimes","spellCheck","defaultValue","defaultCode","this","maxValue","text","Math","round","onClick","React","Component"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,wC,+GCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6HEnItBZ,G,8DACJ,WAAYa,GAAQ,IAAD,8BACjB,cAAMA,IA0ERC,cAAgB,WACd,OAAO,EAAKC,MAAMC,aAChB,yBAAKC,UAAU,UACb,kBAAC,IAAD,CACEC,UAAU,eACVC,KAAM,EAAKJ,MAAMK,UACjBC,MAAM,OACNC,OAAO,OACPC,GAAG,QACHC,QAAS,CACPC,MAAO,CACLC,MAAO,aACPC,QAAS,EACTC,cAAe,QACfC,cAAe,cACfC,eAAgB,CACdC,SAAU,KAGdC,MAAO,CACLN,MAAO,aACPO,SAAU,EACVL,cAAe,QACfC,cAAe,cACfC,eAAgB,CACdC,SAAU,KAGdG,OAAQ,OACRC,OAAQ,CAAC,SACTC,gBAAiB,iBAGrB,yBAAKnB,UAAU,cACb,kEACA,uBAAGM,GAAG,gBACH,EAAKR,MAAMsB,MAAMC,MAAMC,OAAO,GAAGC,cAChC,EAAKzB,MAAMsB,MAAMC,MAAMG,MAAM,IAEjC,+CAC0C,IAAtB,EAAK1B,MAAMsB,MAAMK,IAAUC,YAAY,GAD3D,2BAMF,MAxHa,EA2HnBC,YAAc,WACZ,IAAMC,EAAO5C,SAASC,eAAe,UAAU4C,MAC/C,EAAKC,eAAeC,YAAYH,GAChC,EAAKI,SAAS,CAAEC,iBAAkB,EAAKC,WAAW,KA3HlD,EAAKpC,MAAQ,CACXmC,iBAAkB,EAClBC,WAAW,EACXnC,cAAc,EACdI,UAAW,CAAC,KAGd,EAAK2B,eAAiB,IAAIK,OAAO,GACjC,EAAKL,eAAeM,UAAY,SAACC,GAAO,IAAD,EACCC,KAAKC,MAAMF,EAAEnC,MAA3C+B,EAD6B,EAC7BA,iBAAkBO,EADW,EACXA,QAI1B,GAFA,EAAKR,SAAS,CAAEC,qBAES,IAArBA,EAA0B,CAAC,IAAD,cACGO,EADH,GACrBC,EADqB,KACNrB,EADM,KAItBjB,EAAS,CADE,CAAC,aAAc,YACjB,mBAAiBsC,IAChC,EAAKT,SAAS,CACZE,WAAW,EACXnC,cAAc,EACdI,UAAWA,EACXiB,MAAOA,MAzBI,E,qDA0CjB,OACE,yBAAKpB,UAAU,OACb,wBAAIM,GAAG,SAAP,eAEA,6BAEA,yBAAKN,UAAU,OACb,8BACEM,GAAG,SACHN,UAAU,SACV0C,WAAW,QACXC,aAAc5D,EAAI6D,cAEnBC,KAAKhD,iBAGR,6BAECgD,KAAK/C,MAAMoC,UACV,kBAAC,IAAD,CACEL,MAAOgB,KAAK/C,MAAMmC,iBAClBa,SAAU,EACVC,KAAI,UAAKC,KAAKC,MAAoC,IAA9BJ,KAAK/C,MAAMmC,kBAA3B,OAGN,4BAAQiB,QAASL,KAAKlB,YAAa3B,UAAU,WAA7C,gB,GApEQmD,IAAMC,YAAlBrE,EAgCG6D,Y,uKAmGM7D,Q","file":"static/js/main.b78e096e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/js/0.d245f6d4.chunk.worker.js\"","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      analysisProgress: 0.0,\r\n      analysing: false,\r\n      resultsShown: false,\r\n      graphData: [[]],\r\n    };\r\n\r\n    this.analysisWorker = new Worker(\"./analysisWorker.js\", { type: \"module\" });\r\n    this.analysisWorker.onmessage = (e) => {\r\n      const { analysisProgress, results } = JSON.parse(e.data);\r\n\r\n      this.setState({ analysisProgress });\r\n\r\n      if (analysisProgress === 1.0) {\r\n        const [inputRuntimes, model] = results;\r\n\r\n        const headings = [\"Input size\", \"Runtime\"];\r\n        const graphData = [headings, ...inputRuntimes];\r\n        this.setState({\r\n          analysing: false,\r\n          resultsShown: true,\r\n          graphData: graphData,\r\n          model: model,\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  static defaultCode = `function arithSeriesQuadratic(n) {\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) {\r\n    for (let j = 1; j <= i; j++) {\r\n      sum++;\r\n    }\r\n  }\r\n  return sum;\r\n}`;\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 id=\"title\">Big-O-Meter</h1>\r\n\r\n        <br />\r\n\r\n        <div className=\"row\">\r\n          <textarea\r\n            id=\"editor\"\r\n            className=\"bubble\"\r\n            spellCheck=\"false\"\r\n            defaultValue={App.defaultCode}\r\n          ></textarea>\r\n          {this.renderResults()}\r\n        </div>\r\n\r\n        <br />\r\n\r\n        {this.state.analysing ? (\r\n          <CircularProgressbar\r\n            value={this.state.analysisProgress}\r\n            maxValue={1.0}\r\n            text={`${Math.round(this.state.analysisProgress * 100)}%`}\r\n          />\r\n        ) : (\r\n          <button onClick={this.analyseCode} className=\"primary\">\r\n            Analyse\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderResults = () => {\r\n    return this.state.resultsShown ? (\r\n      <div className=\"bubble\">\r\n        <Chart\r\n          chartType=\"ScatterChart\"\r\n          data={this.state.graphData}\r\n          width=\"100%\"\r\n          height=\"40vh\"\r\n          id=\"graph\"\r\n          options={{\r\n            hAxis: {\r\n              title: \"Input size\",\r\n              minVale: 0,\r\n              baselineColor: \"white\",\r\n              gridlineColor: \"transparent\",\r\n              titleTextStyle: {\r\n                fontSize: 15,\r\n              },\r\n            },\r\n            vAxis: {\r\n              title: \"Runtime ms\",\r\n              minValue: 0,\r\n              baselineColor: \"white\",\r\n              gridlineColor: \"transparent\",\r\n              titleTextStyle: {\r\n                fontSize: 15,\r\n              },\r\n            },\r\n            legend: \"none\",\r\n            colors: [\"white\"],\r\n            backgroundColor: \"transparent\",\r\n          }}\r\n        />\r\n        <div className=\"conclusion\">\r\n          <p>Runtime complexity determined to be</p>\r\n          <p id=\"runtimeClass\">\r\n            {this.state.model.class.charAt(0).toUpperCase() +\r\n              this.state.model.class.slice(1)}\r\n          </p>\r\n          <p>\r\n            Model explains {+(this.state.model.r2 * 100).toPrecision(4)}% of\r\n            runtime variance\r\n          </p>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  };\r\n\r\n  analyseCode = () => {\r\n    const code = document.getElementById(\"editor\").value;\r\n    this.analysisWorker.postMessage(code);\r\n    this.setState({ analysisProgress: 0.0, analysing: true });\r\n  };\r\n}\r\n\r\nexport default App;\r\n\r\n/* TODO:\r\n\r\nDynamic sizing of Google Charts text (can't use viewport units in their API - will need to use JS)\r\nOptimisation: reduce DOM traversal by storing consts pointing to elems\r\n\r\n*/\r\n\r\n/* Some fun functions:\r\n\r\nfunction sumTo(n) {\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) {\r\n    sum += i;\r\n  }\r\n\r\n  return sum;\r\n}\r\n\r\nfunction square(n) {\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) {\r\n    for (let j = 1; j <= n; j++) {\r\n      sum++;\r\n    }\r\n  }\r\n\r\n  return sum;\r\n}\r\n\r\nfunction cube(n) {\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) {\r\n    for (let j = 1; j <= n; j++) {\r\n      for (let k = 1; k <= n; k++) {\r\n        sum++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return sum;\r\n}\r\n\r\nfunction fib(n) {\r\n  if (n <= 1) {\r\n    return n;\r\n  }\r\n\r\n  return fib(n - 1) + fib(n - 2);\r\n}\r\n\r\nfunction monsterFib(n) {\r\n  if (n < 0) {\r\n    return 0;\r\n  }\r\n\r\n  if (n <= 1) {\r\n    return n;\r\n  }\r\n\r\n  return monsterFib(n - 1) + monsterFib(n - 2) + monsterFib(n - 3) + monsterFib(n - 4);\r\n}\r\n\r\nfunction arithSeriesQuadratic(n) {\r\n  let sum = 0;\r\n  for (let i = 1; i <= n; i++) {\r\n    for (let j = 1; j <= i; j++) {\r\n      sum++;\r\n    }\r\n  }\r\n  return sum;\r\n}\r\n\r\n*/\r\n"],"sourceRoot":""}